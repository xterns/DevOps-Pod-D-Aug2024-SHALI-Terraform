name: 'Terraform and Security Scans'

on:
  push:
    branches:
      - main
      - feature/*
  pull_request:
  schedule:
    - cron: '16 3 */3 * *' # Runs at 3:16 AM every third day

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform Workflow'
    runs-on: self-hosted
    environment: prod
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug Information
        run: |
          echo "Current directory: $PWD"
          echo "Contents of current directory:"
          ls -la
          echo "All .tf files in the repository:"
          find . -name "*.tf"
          echo "Git status:"
          git status

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: |
          echo "Running terraform init in directory: $PWD"
          terraform init

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Plan
        run: |
          echo "Running terraform plan in directory: $PWD"
          terraform plan -out=tfplan
      - name: Install Docker
        run: |
          # Remove any old Docker installations
          sudo apt-get remove docker docker-engine docker.io containerd runc || true
          
          # Update package index and install prerequisites
          sudo apt-get update
          sudo apt-get install -y \
            ca-certificates \
            curl \
            gnupg \
            lsb-release

          # Add Docker's official GPG key
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

          # Set up the repository
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

          # Install Docker Engine
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

          # Start Docker service
          sudo systemctl start docker
          sudo systemctl enable docker

          # Add runner user to docker group
          sudo usermod -aG docker $USER
          # Verify installation
          docker --version

      - name: Manual Approval
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: approval
        uses: trstringer/manual-approval@v1
        with:
          approvers: darey-io, uzukwujp
          secret: ${{ secrets.GITHUB_TOKEN }}
          minimum-approvals: 1
          issue-title: "Manual approval required for Terraform pipeline"
          issue-body: |
            Workflow is pending manual review.
            URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            Required approvers: [darey-io, uzukwujp]
            Respond "approved", "approve", "lgtm", "yes" to continue workflow or "denied", "deny", "no" to cancel

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

  tfsec:
    name: 'Run tfsec SARIF Report'
    runs-on: self-hosted
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install tfsec
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget -O - https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash

      - name: Run tfsec and verify output
        run: |
          mkdir -p reports
          tfsec . --format=sarif --out=reports/tfsec.sarif || true
          if [ ! -f "reports/tfsec.sarif" ]; then
            echo "Creating empty SARIF file"
            echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"tfsec","version":"1.0.0"}},"results":[]}]}' > reports/tfsec.sarif
          fi

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/tfsec.sarif

      - name: Archive SARIF file
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tfsec-results
          path: reports/tfsec.sarif
          retention-days: 5
